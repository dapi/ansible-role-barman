---
- name: Prepare
  hosts: all
  tasks:
  - name: "Update APT cache"
    apt:
      update_cache: yes
    become: yes

  - name: "Install package 'acl'"
    package:
      name: acl
    become: yes

  - name: "Install PostgreSQL"
    vars:
      postgresql_version: "{{ ansible_env.POSTGRESQL_VERSION | default(13) }}"
    block:
    - name: "Install GPG"
      package:
        name: gpg
    - name: "Add PostgreSQL repository apt-key | apt"
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
    - name: "Add PostgreSQL repository | apt"
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main {{ postgresql_version }}"
    - name: "Install PostgreSQL package"
      package:
        name: "postgresql-{{ postgresql_version }}"
    - name: "Start PostgreSQL service"
      service:
        name: postgresql
        state: started
        use: "{{ barman_service_mgr }}"
    become: yes

  - name: Install psycopg2 (required by Ansible PostgreSQL modules)
    package:
      name: python3-psycopg2
    become: yes

  - name: Install Telegraf
    block:
    - name: Add InfluxDB apt key (for Telegraf)
      apt_key:
        url: "https://repos.influxdata.com/influxdb.key"
    - name: Add InfluxDB repository (for Telegraf)
      apt_repository:
        repo: 'deb https://repos.influxdata.com/ubuntu {{ ansible_distribution_release }} stable'
    - name: Install Telegraf
      package:
        name: telegraf
    - name: Start Telegraf service
      service:
        name: telegraf
        state: started
        use: "{{ barman_service_mgr }}"
    become: yes

  - name: Configure users and their privileges on PostgreSQL db server
    block:
    - name: Add PostgreSQL user barman_user
      postgresql_user:
        user: "{{ barman_user }}"
        password: "{{ barman_pass }}"
        role_attr_flags: replication
        groups: [pg_read_all_settings, pg_read_all_stats]
    - name: Add PostgreSQL user barman_streaming_user
      postgresql_user:
        user: "{{ barman_streaming_user }}"
        password: "{{ barman_streaming_pass }}"
        role_attr_flags: replication
    - name: GRANT EXECUTE PRIVILEGES ON FUNCTION pg_XXX TO barman_user
      postgresql_privs:
        db: postgres
        privs: EXECUTE
        type: function
        obj: pg_start_backup(text:boolean:boolean),pg_stop_backup(),pg_stop_backup(boolean:boolean),pg_switch_wal(),pg_create_restore_point(text)
        schema: pg_catalog
        roles: "{{ barman_user }}"
    become: yes
    become_user: postgres

  - name: "Start Cron (required by Barman)"
    service:
      name: cron
      state: started
      use: "{{ barman_service_mgr }}"
    become: yes
